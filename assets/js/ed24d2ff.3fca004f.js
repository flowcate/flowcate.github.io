"use strict";(self.webpackChunkdeephub_doc=self.webpackChunkdeephub_doc||[]).push([[2236],{29056:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var s=n(85893),t=n(11151),r=n(70387);const o={sidebar_position:2},l="Security & Authorization",c={id:"deephub/SecurityAuthorization",title:"Security & Authorization",description:"The DeepHub\xae uses the OpenID standard to ensure secure access to the API.",source:"@site/docs/deephub/SecurityAuthorization.md",sourceDirName:"deephub",slug:"/deephub/SecurityAuthorization",permalink:"/docs/deephub/SecurityAuthorization",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/docs/deephub/ServerConfiguration"},next:{title:"Modes of Operation",permalink:"/docs/deephub/OperationModes"}},a={},d=[{value:"Enable Authorization",id:"enable-authorization",level:2},{value:"Base Configuration",id:"base-configuration",level:3},{value:"Server Certificates",id:"server-certificates",level:3},{value:"Authorization Flow Type",id:"authorization-flow-type",level:3},{value:"Dedicated Permissions",id:"dedicated-permissions",level:3},{value:"Applying Individual REST API Permissions",id:"applying-individual-rest-api-permissions",level:2},{value:"Permission Types",id:"permission-types",level:3},{value:"Permissions Example",id:"permissions-example",level:3},{value:"Applying Permissions to Websocket",id:"applying-permissions-to-websocket",level:2},{value:"Required Ownership for Topics",id:"required-ownership-for-topics",level:3},{value:"Sending Location Updates",id:"sending-location-updates",level:3},{value:"Access Token Extension for Ownership Claims",id:"access-token-extension-for-ownership-claims",level:2},{value:"Example OpenID setup with Keycloak",id:"example-openid-setup-with-keycloak",level:2}];function h(e){const i={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h1,{id:"security--authorization",children:"Security & Authorization"}),"\n",(0,s.jsx)(r.Z,{children:(0,s.jsxs)(i.p,{children:["The DeepHub\xae uses the OpenID standard to ensure secure access to the API.\nThis section describes how to apply permission settings to individual API endpoints, WebSocket topics, and OpenID users, and provides an example OpenID setup using Keycloak as the OpenID server.\nHowever, any standard OpenID server can be used.\nRefer to the ",(0,s.jsx)(i.a,{href:"./ServerConfiguration#authentication-authorization-and-encryption-of-traffic",children:"Configuration"})," section for security and authorization configuration options."]})}),"\n",(0,s.jsxs)(r.Z,{children:[(0,s.jsx)(i.h2,{id:"enable-authorization",children:"Enable Authorization"}),(0,s.jsx)(i.p,{children:"In order to enable authorization features, permissions, OpenID and server configurations need to be configured accordingly.\nThe following section gives a quick overview of files and configuration options that need to be configured to enable authorization and security features."}),(0,s.jsx)(i.h3,{id:"base-configuration",children:"Base Configuration"}),(0,s.jsxs)(i.p,{children:["The base configuration can be done in the hub_config.yaml configuration file, via environment variables, or via command line arguments. See the ",(0,s.jsx)(i.a,{href:"./ServerConfiguration",children:'"Configuration"'})," section for a general overview\nof the different base configuration possibilities."]}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"require_authorization"})," must be set to true"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"openid_client_name"})," must be set to verify audiences. This is mandatory for OpenID. Refer to the audience claim setup example below for more details."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"verify_authserver"})," set to true when running the server in production mode (requires authserver_public_key_path)."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"authserver_public_key_path"})," should point to the public key of the OpenID server when running in production mode"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"force_https"})," should be set to true in production mode to disable any insecure plain http or websocket communication"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"openid_config_url"})," must be set to the standard OpenID configuration endpoint, e.g."]}),"\n"]}),(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-yaml",children:"openid_config_url: http://127.0.0.1:8080/auth/realms/omlox/.well-known/openid-configuration\n"})}),(0,s.jsx)(i.h3,{id:"server-certificates",children:"Server Certificates"}),(0,s.jsxs)(i.p,{children:["When running the server in production mode, appropriate settings such as server certificates, public_key_path, private_key_path and dh_params_path must be set.\nPlease refer to the ",(0,s.jsx)(i.a,{href:"./ServerConfiguration#server-configuration",children:'"Configuration"'})," section for details."]}),(0,s.jsx)(i.h3,{id:"authorization-flow-type",children:"Authorization Flow Type"}),(0,s.jsx)(i.p,{children:"The DeepHub uses Bearer Authorization for the REST API.\nClients connecting to the DeepHub will never send passwords directly to the DeepHub.\nInstead, clients login to the OpenID server and provide the bearer token with each request header to the DeepHub.\nThe DeepHub is able to securely verify the token is valid and was issued by the configured OpenID server."}),(0,s.jsx)(i.p,{children:"For service-to-service and client-to-service communication, we recommend using bearer authorization.\nFor web clients we advise to use Authorization Code Flow for secure login."}),(0,s.jsx)(i.h3,{id:"dedicated-permissions",children:"Dedicated Permissions"}),(0,s.jsx)(i.p,{children:"The dedicated permissions can be configured within the permissions.yaml configuration file."}),(0,s.jsx)(i.admonition,{type:"note",children:(0,s.jsx)(i.p,{children:"There is no other way to configure the permissions than via this file. Environment variables or command line arguments to configure these are not available."})}),(0,s.jsxs)(i.p,{children:["This file contains the configuration of the authorization to access the REST API and the WebSocket API. It is explained in detail in the ",(0,s.jsx)(i.a,{href:"#applying-individual-rest-api-permissions",children:"next section"}),", directly below:"]})]}),"\n",(0,s.jsxs)(r.Z,{children:[(0,s.jsx)(i.h2,{id:"applying-individual-rest-api-permissions",children:"Applying Individual REST API Permissions"}),(0,s.jsx)(i.p,{children:"The DeepHub server uses a RBAC (Role Based Access Control) model to assign permissions to OpenID roles. The permissions are stored in a YAML based file in the data directory of the Docker container. The permissions are loaded once at startup."}),(0,s.jsx)(i.p,{children:"General structure of the permissions file:"}),(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-yaml",children:"role-name:\n  description: Some role description\n  '/api/path':\n    - PERMISSION1\n    - PERMISSION2\n  '/api/path_2/*':\n    - PERMISSION1\n  '/api/path_3/:resource_id':\n    - PERMISSION1\n    ...\n"})}),(0,s.jsx)(i.p,{children:"Description of the core elements:"}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"role-name"})," must match an actual OpenID role name provided as part of the JWT Access Token."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"/api/path"})," must match an actual DeepHub API endpoint (refer to the OpenAPI file for a list of available endpoints)."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"*"})," symbol is a wildcard, allowing permissions to be given to all subpaths of an API. For example, ",(0,s.jsx)(i.code,{children:"/api/path_2/*"})," will match all subpaths, such as ",(0,s.jsx)(i.code,{children:"/api/path_2/a"}),", ",(0,s.jsx)(i.code,{children:"/api/path_2/b"})," etc."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:"A path for a given role should only be specified once. Duplicates will produce an error."}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"Permission"})," can be any of the following (multiple entries possible): ",(0,s.jsx)(i.code,{children:"CREATE_ANY"}),", ",(0,s.jsx)(i.code,{children:"READ_ANY"}),", ",(0,s.jsx)(i.code,{children:"UPDATE_ANY"}),", ",(0,s.jsx)(i.code,{children:"DELETE_ANY"}),", ",(0,s.jsx)(i.code,{children:"CREATE_OWN"}),", ",(0,s.jsx)(i.code,{children:"READ_OWN"}),", ",(0,s.jsx)(i.code,{children:"UPDATE_OWN"}),", ",(0,s.jsx)(i.code,{children:"DELETE_OWN"}),".\nNote that the respective ",(0,s.jsx)(i.code,{children:"ANY"})," and ",(0,s.jsx)(i.code,{children:"OWN"})," permissions are mutually exclusive, i.e., for a given path a role can have either ",(0,s.jsx)(i.code,{children:"READ_ANY"})," or ",(0,s.jsx)(i.code,{children:"READ_OWN"}),", but not both.\nRefer to the description below to choose the right permission."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:":resource_id"})," is a placeholder variable, matching identifiers given as part of a request.\nFor example, the permission URL ",(0,s.jsx)(i.code,{children:"/v1/providers/:provider_id/location"})," will match the HTTP GET request ",(0,s.jsx)(i.code,{children:"/v1/providers/provider123/location"}),", and map the placeholder variable ",(0,s.jsx)(i.code,{children:"provider_id"}),' to the value "provider123".\nWhen the permission for the URL is one of ',(0,s.jsx)(i.code,{children:"CREATE_OWN"}),", ",(0,s.jsx)(i.code,{children:"READ_OWN"}),", ",(0,s.jsx)(i.code,{children:"UPDATE_OWN"}),", ",(0,s.jsx)(i.code,{children:"DELETE_OWN"}),", then the client is required to provide ownership proof with its access token.\nThe structure of the required access token is described ",(0,s.jsx)(i.a,{href:"#access-token-extension-for-ownership-claims",children:"below"}),".",(0,s.jsx)(i.br,{}),"\n",(0,s.jsx)(i.strong,{children:"Important:"})," The placeholder variables ",(0,s.jsx)(i.strong,{children:"must"})," match the names defined in the OpenAPI specification, e.g. it's required to use ",(0,s.jsx)(i.code,{children:":provider_id"})," for the route ",(0,s.jsx)(i.code,{children:"/v1/providers/:provider_id"}),".\nThe placeholder variable's name is used to match named resource identifiers provided with the access token, thus a mismatch will result in failed authorization."]}),"\n"]}),"\n"]}),(0,s.jsx)(i.h3,{id:"permission-types",children:"Permission Types"}),(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"CREATE_ANY"}),(0,s.jsx)(i.br,{}),"\n","The role is allowed to create (e.g. via POST request) a resource at the given API path."]}),(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"READ_ANY"}),(0,s.jsx)(i.br,{}),"\n","The role is allowed to read all resource objects at a given API path."]}),(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"UPDATE_ANY"}),(0,s.jsx)(i.br,{}),"\n","The role is allowed to update (e.g. via PUT request) resources at a given API path."]}),(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"DELETE_ANY"}),(0,s.jsx)(i.br,{}),"\n","The role is allowed to delete all resources for a given API path."]}),(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"CREATE_OWN"}),", ",(0,s.jsx)(i.code,{children:"READ_OWN"}),", ",(0,s.jsx)(i.code,{children:"UPDATE_OWN"}),", ",(0,s.jsx)(i.code,{children:"DELETE_OWN"}),(0,s.jsx)(i.br,{}),"\n","The role is only allowed to read or mutate it's own resources.\nResource ownership is defined via JWT AccessToken.\nA particular user which owns a resource must have a matching resource UUID in the Access Token."]}),(0,s.jsx)(i.h3,{id:"permissions-example",children:"Permissions Example"}),(0,s.jsx)(i.p,{children:"In the example below, a role named omlox-api-role is provided full admin access to all API endpoints using a wildcard match:"}),(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-yaml",children:"omlox-api-role:\n  description: Super user with all permissions\n  '/v1/*':\n    - CREATE_ANY\n    - READ_ANY\n    - UPDATE_ANY\n    - DELETE_ANY\n"})}),(0,s.jsx)(i.p,{children:"In this example, a user is given access restricted to their own location data:"}),(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-yaml",children:"omlox-api-role:\n  description: A user with access to only their own location data\n  '/v1/providers/:provider_id/*':\n    - CREATE_OWN\n    - READ_OWN\n    - UPDATE_OWN\n    - DELETE_OWN\n"})})]}),"\n",(0,s.jsxs)(r.Z,{children:[(0,s.jsx)(i.h2,{id:"applying-permissions-to-websocket",children:"Applying Permissions to Websocket"}),(0,s.jsxs)(i.p,{children:["Permissions to websocket topics follow the same rules as the permissions for the REST API.\nThe url paths use the following scheme: ",(0,s.jsx)(i.code,{children:"/v1/ws/socket/{topic}/:resource_id"})]}),(0,s.jsxs)(i.p,{children:["In the scheme above, ",(0,s.jsx)(i.code,{children:"{topic}"}),' is a placeholder for the actual websocket topic name, e.g. "location_updates", and ',(0,s.jsx)(i.code,{children:":resource_id"})," is a placeholder for the identifier name which must match the data for this topic using the same rules and naming scheme as stated for the ",(0,s.jsx)(i.a,{href:"#applying-individual-rest-api-permissions",children:"REST API"}),"."]}),(0,s.jsx)(i.p,{children:"For example, a permission to only access location data owned by the user that matches a provider_id given as part of the access token:"}),(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-yaml",children:"read-only-own-resources-role:\n  '/v1/ws/socket/location_updates/:provider_id':\n    - READ_OWN\n"})}),(0,s.jsxs)(i.p,{children:["Wildcards can be applied in the same way as the REST API. For example, ",(0,s.jsx)(i.code,{children:"/v1/ws/socket/location_updates/*"})," would match location updates for all location providers.\nTo subscribe to a topic, either ",(0,s.jsx)(i.code,{children:"READ_ANY"})," or ",(0,s.jsx)(i.code,{children:"READ_OWN"})," permissions are required.\nThe limitations for ",(0,s.jsx)(i.code,{children:"READ_OWN"})," permissions are detailed in the following section."]}),(0,s.jsx)(i.h3,{id:"required-ownership-for-topics",children:"Required Ownership for Topics"}),(0,s.jsxs)(i.p,{children:["All topics require ownership for certain resources in order for subscriptions to work if the topic's permissions are ",(0,s.jsx)(i.code,{children:"READ_OWN"}),".\nThe following lists the topics and what ownerships are required to receive messages."]}),(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Topic"}),(0,s.jsx)(i.th,{children:"Ownership Needed"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"location_updates"}),(0,s.jsxs)(i.td,{children:["The ",(0,s.jsx)(i.strong,{children:"Provider"})," as identified by the event's field ",(0,s.jsx)(i.code,{children:"provider_id"})]})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"collision_events"}),(0,s.jsxs)(i.td,{children:["The ",(0,s.jsx)(i.strong,{children:"Trackable"})," as identified by the event's field ",(0,s.jsx)(i.code,{children:"collision_id_1"})]})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"fence_events"}),(0,s.jsxs)(i.td,{children:["The ",(0,s.jsx)(i.strong,{children:"Fence"})," as identified by the event's field ",(0,s.jsx)(i.code,{children:"fence_id"})]})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"trackable_motions"}),(0,s.jsxs)(i.td,{children:["The ",(0,s.jsx)(i.strong,{children:"Trackable"})," as identified by the event's field ",(0,s.jsx)(i.code,{children:"id"})]})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:"change_events"}),(0,s.jsxs)(i.td,{children:["The topic specific ",(0,s.jsx)(i.strong,{children:"Entity"})," as identified by the event's field ",(0,s.jsx)(i.code,{children:"id"})]})]})]})]}),(0,s.jsx)(i.admonition,{type:"note",children:(0,s.jsx)(i.p,{children:"The ownership for additional resources (e.g. the second Trackable of a collision) are currently not checked for subscribed topics."})}),(0,s.jsx)(i.h3,{id:"sending-location-updates",children:"Sending Location Updates"}),(0,s.jsxs)(i.p,{children:["To send location updates via Websocket no subscription is required.\nHowever, the permissions for the respective topic must be ",(0,s.jsx)(i.code,{children:"CREATE_ANY"})," or ",(0,s.jsx)(i.code,{children:"UPDATE_ANY"}),".\nFiner grained permissions based on ownership are currently not supported for sending location updates via websocket."]})]}),"\n",(0,s.jsxs)(r.Z,{children:[(0,s.jsx)(i.h2,{id:"access-token-extension-for-ownership-claims",children:"Access Token Extension for Ownership Claims"}),(0,s.jsxs)(i.p,{children:["In order to allow access to ownership restricted URLs, the access token must contain an object member named ",(0,s.jsx)(i.code,{children:"https://deephub.io/owned_resources"})," containing named lists to resource identifiers.\nThe member names ",(0,s.jsx)(i.strong,{children:"must"})," adhere to the following scheme:"]}),(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:"placeholder_variable + 's'\n"})}),(0,s.jsx)(i.p,{children:"In other words, the name of the members is the plural of the placeholder variable name. As an example, the json content of an access token looks like this:"}),(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-json",children:'{\n    "https://deephub.io/owned_resources": {\n        "provider_ids": [\n            "provider123"\n        ],\n        "trackable_ids": [\n            "trackable123"\n        ],\n        "zone_ids": [\n            "zone123"\n        ],\n        "fence_ids": [\n            "fence123"\n        ]\n    },\n    ...\n}\n'})})]}),"\n",(0,s.jsxs)(r.Z,{children:[(0,s.jsx)(i.h2,{id:"example-openid-setup-with-keycloak",children:"Example OpenID setup with Keycloak"}),(0,s.jsx)(i.p,{children:"An OpenID server is required in order to enable authorization features in DeepHub.\nBelow is an example using Keycloak, though the basic setup should work similar for other OpenID servers."}),(0,s.jsxs)(i.p,{children:["Prerequisites: A running Keycloak instance. You can start with a simple standalone instance for development and testing.\nSee the ",(0,s.jsx)(i.a,{href:"https://www.keycloak.org/docs/latest/server_admin/index.html",children:"Keycloak guide"})," to get started. Alternatively, you can download and use our ",(0,s.jsx)(i.a,{href:"https://github.com/flowcate/deephub-advanced-setup",children:'"deephub-advanced-setup" example from github'}),"."]}),(0,s.jsx)(i.p,{children:"Log in to the Keycloak Admin Console of your Keycloak instance and then follow this procedure:"}),(0,s.jsx)(i.p,{children:'At first we have to create a new realm; let\'s call it "omlox" in this example:'}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"From the Master drop-down menu, click Add Realm."}),"\n",(0,s.jsx)(i.li,{children:"Type omlox in the Name field and click Create."}),"\n"]}),(0,s.jsx)(i.p,{children:'Next we create the role "omlox-api-role" for DeepHub API access. To do so:'}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"From the menu, click Roles to open the roles list."}),"\n",(0,s.jsx)(i.li,{children:"Click on Add Role on the right side of the list"}),"\n",(0,s.jsx)(i.li,{children:"Enter omlox-api-role in the Role Name field. The role name must not be changed, because this role name is mapped to omlox permissions."}),"\n"]}),(0,s.jsx)(i.p,{children:'Next we create a user named "omlox-api-user". To create a new user in the omlox realm, complete the following steps:'}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Make sure the omlox Realm is the selected current Realm in the Master drop-down menu"}),"\n",(0,s.jsx)(i.li,{children:"From the menu, click Users to open the user list page."}),"\n",(0,s.jsx)(i.li,{children:"On the right side of the user list, click Add User to open the add user page."}),"\n",(0,s.jsx)(i.li,{children:"Enter the name omlox-api-user in the Username field. Flip the Email Verified switch from Off to On and click Save to save the data and open the management page for the new user."}),"\n",(0,s.jsx)(i.li,{children:"Click the Credentials tab and enter a password for the new user. Flip the Temporary switch to Off to make the new password permanent. Click Set Password to save the changes."}),"\n",(0,s.jsx)(i.li,{children:"Click the Role Mappings tab. In the Realm Roles list, select omlox-api-role and click the Add selected button."}),"\n"]}),(0,s.jsx)(i.p,{children:'Next we create a client named "omlox-api-client". To create a new user in the omlox realm, complete the following steps:'}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Make sure the omlox realm is the selected current realm in the Master drop-down menu"}),"\n",(0,s.jsx)(i.li,{children:"From the menu, click Clients to open the client list page."}),"\n",(0,s.jsx)(i.li,{children:"On the right side of the client list, click Create to open the create client page."}),"\n",(0,s.jsx)(i.li,{children:"Enter the name omlox-api-client in the Client ID field. Select openid-connect in the Client Protocol dropdown."}),"\n",(0,s.jsx)(i.li,{children:"Select Public as Access Type"}),"\n",(0,s.jsx)(i.li,{children:"Toggle Service Accounts Enabled. This enables Client Credentials Grant workflow for the DeepHub to fetch access tokens for token verification of client requests."}),"\n",(0,s.jsx)(i.li,{children:"Click Save."}),"\n"]}),(0,s.jsx)(i.p,{children:"Next, create another client to be used by the DeepHub service itself. Note: This client is mandatory even in case no other OpenID exists to communicate with the DeepHub,\nand the client name must match with the openid_client_name in the DeepHub configuration.\nAll other OpenID clients which communicate with the DeepHub have to include this client in the JWT as audience, so that the DeepHub can verify audiences as mandated by OpenID."}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Repeat the previous step to create a client."}),"\n",(0,s.jsx)(i.li,{children:"Name deephub-service. Note: The name is case-sensitive and must match the one in the configuration file."}),"\n",(0,s.jsx)(i.li,{children:"Set the Access Type to bearer-only."}),"\n",(0,s.jsx)(i.li,{children:"Click Save."}),"\n"]}),(0,s.jsx)(i.p,{children:"For security reasons an OpenID enabled service has to verify audience claims in order to avoid token misuse. Follow these steps:"}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"From the meu, click Client Scopes to open the client scopes list."}),"\n",(0,s.jsx)(i.li,{children:"Click Create to create a new client scope."}),"\n",(0,s.jsx)(i.li,{children:"Enter hub-service into the Name field."}),"\n",(0,s.jsx)(i.li,{children:"Click the Save button to create the new client scope."}),"\n",(0,s.jsx)(i.li,{children:"In the list of client scopes, select the newly created hub-service."}),"\n",(0,s.jsx)(i.li,{children:"Select Mappers from the top menu."}),"\n",(0,s.jsx)(i.li,{children:"Click the Create button on the right side."}),"\n",(0,s.jsx)(i.li,{children:"Enter hub-service-audience into the Name field."}),"\n",(0,s.jsx)(i.li,{children:"From the Mapper Type selection choose Audience."}),"\n",(0,s.jsx)(i.li,{children:"In the Included Client Audience select deephub-service."}),"\n",(0,s.jsx)(i.li,{children:"Click Save button to save the changes."}),"\n",(0,s.jsx)(i.li,{children:"Now we create a mapping between the newly created scope and the client used for user logins. From the left menu panel, choose Clients and choose omlox-api-client."}),"\n",(0,s.jsx)(i.li,{children:"From either the Default Client Scopes or Optional Client Scopes list select hub-service and click on Add selected. You can only add it to either default or optional. The difference is that when you add it to the default list the token will always contain the audience hub-service. When you set it to optional the user client (e.g. web application) must explicitly set the scope to hub-service when requesting the token, the token will then contain the audience deephub-service. It\u2019s advised to use the optional mapper and limit scopes appropriately on the user client side."}),"\n"]}),(0,s.jsx)(i.p,{children:"Optional steps\nIt\u2019s possible to define fine-grained ownership permissions by adding custom attributes to a user. This allows for assigning read_own permissions to API paths which are restricted to users that own a particular resource. Follow these steps:"}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"From the left menu, click Clients."}),"\n",(0,s.jsx)(i.li,{children:"From the clients list, select omlox-api-client. From the top menu select Mappers."}),"\n",(0,s.jsx)(i.li,{children:"Click on the Create button to create a new mapper."}),"\n",(0,s.jsx)(i.li,{children:"Set a name like Assigned Location Providers."}),"\n",(0,s.jsx)(i.li,{children:"In the Mapper Type selection, select User Attribute."}),"\n",(0,s.jsxs)(i.li,{children:["In the User Attribute field, set ",(0,s.jsx)(i.code,{children:"https://deephub.io/owned_resources/provider_ids"})," (Important: This field must match with the one we set in the User attributes for the particular user."]}),"\n",(0,s.jsxs)(i.li,{children:["In the Token Claim Name field, set ",(0,s.jsx)(i.code,{children:"https://deephub\\.io/owned_resources.provider_ids"})," (without quotes). It\u2019s important to use this exact name, as the DeepHub will check if a user has access to particular resources using this name. Also note the ",(0,s.jsx)(i.code,{children:"\\"})," and ",(0,s.jsx)(i.code,{children:"."})," in this name. This will actually create a json member named ",(0,s.jsx)(i.code,{children:"https://deephub.io/owned_resources"})," with an object named ",(0,s.jsx)(i.code,{children:"provider_ids"}),"."]}),"\n",(0,s.jsx)(i.li,{children:"From the Claim JSON Type selection, select String."}),"\n",(0,s.jsx)(i.li,{children:"Enable Multivalued."}),"\n",(0,s.jsx)(i.li,{children:"Click Save"}),"\n"]}),(0,s.jsx)(i.p,{children:"Repeat the above steps to create respective mappers for fences, trackables and zones as well, using the following values."}),(0,s.jsx)(i.p,{children:"For fence ownership mapping:"}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Set User Attribute to: ",(0,s.jsx)(i.code,{children:"https://deephub.io/owned_resources/fence_ids"})]}),"\n",(0,s.jsxs)(i.li,{children:["Set Token Claim Name to: ",(0,s.jsx)(i.code,{children:"https://deephub\\.io/owned_resources.fence_ids"})]}),"\n"]}),(0,s.jsx)(i.p,{children:"For trackable ownership mapping:"}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Set User Attribute to: ",(0,s.jsx)(i.code,{children:"https://deephub.io/owned_resources/trackable_ids"})]}),"\n",(0,s.jsxs)(i.li,{children:["Set Token Claim Name to: ",(0,s.jsx)(i.code,{children:"https://deephub\\.io/owned_resources.trackable_ids"})]}),"\n"]}),(0,s.jsx)(i.p,{children:"For zone ownership mapping:"}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Set User Attribute to: ",(0,s.jsx)(i.code,{children:"https://deephub.io/owned_resources/zone_ids"})]}),"\n",(0,s.jsxs)(i.li,{children:["Set Token Claim Name to: ",(0,s.jsx)(i.code,{children:"https://deephub\\.io/owned_resources.zone_ids"})]}),"\n"]}),(0,s.jsx)(i.p,{children:"For source ownership mapping:"}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Set User Attribute to: ",(0,s.jsx)(i.code,{children:"https://deephub.io/owned_resources/source_ids"})]}),"\n",(0,s.jsxs)(i.li,{children:["Set Token Claim Name to: ",(0,s.jsx)(i.code,{children:"https://deephub\\.io/owned_resources.source_ids"})]}),"\n"]}),(0,s.jsx)(i.p,{children:"Now we can create actual user attributes which will then be mapped at runtime. To assign a Location Provider to a user, follow these steps:"}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"In the left menu bar, click Users"}),"\n",(0,s.jsx)(i.li,{children:"Choose a user from the list to whom you want to assign a trackable"}),"\n",(0,s.jsx)(i.li,{children:"Click Attributes."}),"\n",(0,s.jsxs)(i.li,{children:["In the attributes key / value list, set key to ",(0,s.jsx)(i.code,{children:"https://deephub.io/owned_resources/provider_ids"})," and the value to the ID of the Location Provider you want to assign to the user (e.g. 5896823C-3B3F-48BB-B74B-E43041ABD59C)."]}),"\n"]}),(0,s.jsx)(i.p,{children:"Repeat the above steps for fences, trackables, zones, and sources using the respective keys below:"}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"https://deephub.io/owned_resources/fence_ids"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"https://deephub.io/owned_resources/trackable_ids"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"https://deephub.io/owned_resources/zone_ids"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"https://deephub.io/owned_resources/source_ids"})}),"\n"]}),(0,s.jsx)(i.p,{children:'Note: You can set multiple entries in the value field using "##" as delimiter between entries. For example:'}),(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:"providerid1##providerid2\n"})}),(0,s.jsx)(i.p,{children:"This will show as two items in the provider_ids array."}),(0,s.jsx)(i.p,{children:"Further note: source_ids refer to the source given in a location update. This source can reference a zone, but doesn't have to. As such, source_ids should contain all zone ids in addition to other source ids. At this point some double book keeping is required."})]})]})}function p(e={}){const{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},70387:(e,i,n)=>{n.d(i,{Z:()=>t});n(67294);var s=n(85893);function t(e){let{children:i}=e;return(0,s.jsx)("section",{className:"section markdown",children:i})}},11151:(e,i,n)=>{n.d(i,{Z:()=>l,a:()=>o});var s=n(67294);const t={},r=s.createContext(t);function o(e){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);