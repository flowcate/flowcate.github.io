"use strict";(self.webpackChunkdeephub_doc=self.webpackChunkdeephub_doc||[]).push([[4612],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(a),h=l,m=d["".concat(o,".").concat(h)]||d[h]||c[h]||r;return a?n.createElement(m,i(i({ref:t},u),{},{components:a})):n.createElement(m,i({ref:t},u))}));function m(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=h;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:l,i[1]=s;for(var p=2;p<r;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},70387:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(67294);function l(e){let{children:t}=e;return n.createElement("section",{className:"section markdown"},t)}},34393:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var n=a(87462),l=(a(67294),a(3905)),r=a(70387);const i={sidebar_position:2},s="Configuration",o={unversionedId:"deephub/ServerConfiguration",id:"deephub/ServerConfiguration",title:"Configuration",description:"The DeepHub\xae can be configured in three different ways. Listed from most to least specific, these ways are:",source:"@site/docs/deephub/ServerConfiguration.md",sourceDirName:"deephub",slug:"/deephub/ServerConfiguration",permalink:"/docs/deephub/ServerConfiguration",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/deephub/introduction"},next:{title:"Security & Authorization",permalink:"/docs/deephub/SecurityAuthorization"}},p={},u=[{value:"Basic Setup",id:"basic-setup",level:2},{value:"config_path",id:"config_path",level:3},{value:"port",id:"port",level:3},{value:"host",id:"host",level:3},{value:"license_key",id:"license_key",level:3},{value:"Advanced Setup",id:"advanced-setup",level:2},{value:"license_server_address",id:"license_server_address",level:3},{value:"license_server_port",id:"license_server_port",level:3},{value:"doc_root",id:"doc_root",level:3},{value:"num_threads",id:"num_threads",level:3},{value:"record_path",id:"record_path",level:3},{value:"playback_path",id:"playback_path",level:3},{value:"playback_speed",id:"playback_speed",level:3},{value:"cors",id:"cors",level:3},{value:"severity_level",id:"severity_level",level:3},{value:"Authentication, Authorization, and Encryption of Traffic",id:"authentication-authorization-and-encryption-of-traffic",level:2},{value:"require_authorization",id:"require_authorization",level:3},{value:"openid_config_url",id:"openid_config_url",level:3},{value:"openid_client_name",id:"openid_client_name",level:3},{value:"openid_client_secret",id:"openid_client_secret",level:3},{value:"authserver_public_key_path",id:"authserver_public_key_path",level:3},{value:"verify_authserver",id:"verify_authserver",level:3},{value:"public_key_path",id:"public_key_path",level:3},{value:"private_key_path",id:"private_key_path",level:3},{value:"private_key_password",id:"private_key_password",level:3},{value:"dh_params_path",id:"dh_params_path",level:3},{value:"force_https",id:"force_https",level:3},{value:"Database Tuning",id:"database-tuning",level:2},{value:"persist_locations",id:"persist_locations",level:3},{value:"db_fast_writes",id:"db_fast_writes",level:3},{value:"db_type",id:"db_type",level:3},{value:"cassandra_hosts",id:"cassandra_hosts",level:3},{value:"cassandra_port",id:"cassandra_port",level:3},{value:"cassandra_username",id:"cassandra_username",level:3},{value:"cassandra_password",id:"cassandra_password",level:3},{value:"cassandra_keyspace",id:"cassandra_keyspace",level:3},{value:"cassandra_connect_timeout",id:"cassandra_connect_timeout",level:3},{value:"cassandra_request_timeout",id:"cassandra_request_timeout",level:3},{value:"cassandra_read_consistency",id:"cassandra_read_consistency",level:3},{value:"cassandra_write_consistency",id:"cassandra_write_consistency",level:3},{value:"cassandra_keep_alive",id:"cassandra_keep_alive",level:3},{value:"cassandra_latency_aware_routing",id:"cassandra_latency_aware_routing",level:3},{value:"cassandra_token_aware_routing",id:"cassandra_token_aware_routing",level:3},{value:"cassandra_load_balancing",id:"cassandra_load_balancing",level:3},{value:"cassandra_io_threads",id:"cassandra_io_threads",level:3},{value:"cassandra_replication_strategy",id:"cassandra_replication_strategy",level:3},{value:"cassandra_use_tls",id:"cassandra_use_tls",level:3},{value:"cassandra_tls_pem",id:"cassandra_tls_pem",level:3},{value:"cassandra_rate",id:"cassandra_rate",level:3},{value:"cassandra_burst_size",id:"cassandra_burst_size",level:3},{value:"Connecting ISO-24730 RTLS systems",id:"connecting-iso-24730-rtls-systems",level:2},{value:"iso_24730_connections",id:"iso_24730_connections",level:3},{value:"Using a proxy server for outside communication",id:"using-a-proxy-server-for-outside-communication",level:2},{value:"Preparing self signed certificates for development",id:"preparing-self-signed-certificates-for-development",level:2}],d={toc:u},c="wrapper";function h(e){let{components:t,...a}=e;return(0,l.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"configuration"},"Configuration"),(0,l.kt)(r.Z,{mdxType:"Section"},(0,l.kt)("p",null,"The DeepHub\xae can be configured in three different ways. Listed from most to least specific, these ways are:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Environment variables"),(0,l.kt)("li",{parentName:"ol"},"Command line arguments"),(0,l.kt)("li",{parentName:"ol"},"Configuration file")),(0,l.kt)("p",null,"Options provided multiple times via different ways will be overridden according to the aforementioned specificity.\nAdditionally there can be a license_key YAML file stored in the data directory of the Docker container that will override the license_key. It can be added via the license/key REST API."),(0,l.kt)("p",null,"The configuration file is a YAML based file, stored in the data directory of the Docker container (or in the directory provided with config","_","path).\nThe configuration is loaded once on startup. For every configuration option the respective environment variable is fully capitalized and prepended with DEEPHUB, separated by an underscore."),(0,l.kt)("p",null,"As an example, ",(0,l.kt)("strong",{parentName:"p"},"license_key")," becomes ",(0,l.kt)("strong",{parentName:"p"},"DEEPHUB_LICENSE_KEY"),".")),(0,l.kt)(r.Z,{mdxType:"Section"},(0,l.kt)("h2",{id:"basic-setup"},"Basic Setup"),(0,l.kt)("h3",{id:"config_path"},"config_path"),(0,l.kt)("p",null,"The directory used by DeepHub to store the database and configuration files. This directory needs read and write permissions."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: .")),(0,l.kt)("h3",{id:"port"},"port"),(0,l.kt)("p",null,"The port on which to listen for incoming connections. Note that the server is capable to upgrade requests, thus only a single port is used by the server for HTTP, HTTPS and Websocket (both plain and TLS)."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: number"),(0,l.kt)("li",{parentName:"ul"},"Default: 8081")),(0,l.kt)("h3",{id:"host"},"host"),(0,l.kt)("p",null,"The servers host name."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: localhost")),(0,l.kt)("h3",{id:"license_key"},"license_key"),(0,l.kt)("p",null,"The license key used to authenticate this DeepHub instance with the license server. This parameter is mandatory!"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: not set"),(0,l.kt)("li",{parentName:"ul"},"Example: BE7B7835-F2B3-4F40-90C7-458AC95D4859"))),(0,l.kt)(r.Z,{mdxType:"Section"},(0,l.kt)("h2",{id:"advanced-setup"},"Advanced Setup"),(0,l.kt)("h3",{id:"license_server_address"},"license_server_address"),(0,l.kt)("p",null,"The address at which the Flowcate license server is reachable."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: ",(0,l.kt)("a",{parentName:"li",href:"https://license.deephub.io"},"https://license.deephub.io"))),(0,l.kt)("h3",{id:"license_server_port"},"license_server_port"),(0,l.kt)("p",null,"The port at which the Flowcate license server is reachable."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: 443")),(0,l.kt)("h3",{id:"doc_root"},"doc_root"),(0,l.kt)("p",null,"The document root directory of the web server."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: .")),(0,l.kt)("h3",{id:"num_threads"},"num_threads"),(0,l.kt)("p",null,"The number of worker threads to spawn for HTTP(s) and websocket connections. "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: number"),(0,l.kt)("li",{parentName:"ul"},"Default: Number of available CPU cores. ")),(0,l.kt)("h3",{id:"record_path"},"record_path"),(0,l.kt)("p",null,"A path to the session record. When this path is set, the server will write all requests to the specified file for later playback. Note: This functionality is meant for demonstration and testing purposes. Do not use this in production mode, as it will slow down overall operation of the server and keep the recorded file growing over time. "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: Not set")),(0,l.kt)("h3",{id:"playback_path"},"playback_path"),(0,l.kt)("p",null,"A path to a file containing a recorded session. The session will be played back in a loop."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: Not set")),(0,l.kt)("h3",{id:"playback_speed"},"playback_speed"),(0,l.kt)("p",null,"The speed at which the recorded session will be played back. "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: number"),(0,l.kt)("li",{parentName:"ul"},"Default: 1.0")),(0,l.kt)("h3",{id:"cors"},"cors"),(0,l.kt)("p",null,"Wether the server should accept cross site origin requests (cors)."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: boolean"),(0,l.kt)("li",{parentName:"ul"},"Default: true")),(0,l.kt)("h3",{id:"severity_level"},"severity_level"),(0,l.kt)("p",null,"In order to be able to control the verbosity of our logging, we\ndifferentiate between the following six ",(0,l.kt)("em",{parentName:"p"},"severity levels"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Fatal"),":   error that is fatal for the application"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Error"),":   error that is fatal for the current operation"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Warning"),": error that is recoverable"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Info"),":    state of the program"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Debug"),":   diagnostic information of error-prone code paths"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Trace"),":   describes the complete program flow")),(0,l.kt)("p",null,"The DeepHub will log all messages from the chosen severity level and higher. If you\nspecify ",(0,l.kt)("inlineCode",{parentName:"p"},"Error"),", you will get messages of type ",(0,l.kt)("em",{parentName:"p"},"Error")," and ",(0,l.kt)("em",{parentName:"p"},"Fatal"),". An exemplary\nlogging output looks like the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"I20200630 15:21:45.783285 104390656 HubController.cpp:425] This is an info message\nE20200630 15:21:45.784117 104390656 HubController.cpp:426] This is an error message\n")),(0,l.kt)("p",null,"and correspond to this pattern"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"[Lyyyymmdd hh:mm:ss.uuuuuu thread-id file:line] msg...\n")),(0,l.kt)("p",null,"where the fields are defined as follows:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Field"),(0,l.kt)("th",{parentName:"tr",align:null},"Explanation"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"L")),(0,l.kt)("td",{parentName:"tr",align:null},"A single character, representing the log level (eg 'I' for INFO)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"yyyy")),(0,l.kt)("td",{parentName:"tr",align:null},"The year")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"mm")),(0,l.kt)("td",{parentName:"tr",align:null},"The month (zero padded; ie May is '05')")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"dd")),(0,l.kt)("td",{parentName:"tr",align:null},"The day (zero padded)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"hh:mm:ss.uuuuuu")),(0,l.kt)("td",{parentName:"tr",align:null},"Time in hours, minutes and fractional seconds")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"thread-id")),(0,l.kt)("td",{parentName:"tr",align:null},"The space-padded thread ID as returned by GetTID() (this matches the PID on Linux)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"file")),(0,l.kt)("td",{parentName:"tr",align:null},"The file name")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"line")),(0,l.kt)("td",{parentName:"tr",align:null},"The line number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"msg")),(0,l.kt)("td",{parentName:"tr",align:null},"The user-supplied message")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Note:")," Even though we can specify six different severity levels, the output will only mark four different severity levels (",(0,l.kt)("strong",{parentName:"p"},"F"),"atal, ",(0,l.kt)("strong",{parentName:"p"},"E"),"rror, ",(0,l.kt)("strong",{parentName:"p"},"W"),"arning, ",(0,l.kt)("strong",{parentName:"p"},"I"),"nfo).\nIf the severity level is set accordingly, ",(0,l.kt)("inlineCode",{parentName:"p"},"Trace")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Debug")," messages will also appear as ",(0,l.kt)("strong",{parentName:"p"},"I"),"nfo in the output."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: Info"))),(0,l.kt)(r.Z,{mdxType:"Section"},(0,l.kt)("h2",{id:"authentication-authorization-and-encryption-of-traffic"},"Authentication, Authorization, and Encryption of Traffic"),(0,l.kt)("h3",{id:"require_authorization"},"require_authorization"),(0,l.kt)("p",null,"Whether authorization is required or not. If authorization is required openid_config_url must be configured, and the optional parameters authserver_public_key_path and verify_authserver are strongly advised to be set for a production environment."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: boolean"),(0,l.kt)("li",{parentName:"ul"},"Default: false")),(0,l.kt)("h3",{id:"openid_config_url"},"openid_config_url"),(0,l.kt)("p",null,"The OpenID configuration URL which contains information about OpenID authentication and authorization endpoints. Check your OpenID server documentation for details. This setting is mandatory when require_authorization is used."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: not set"),(0,l.kt)("li",{parentName:"ul"},"Example: ",(0,l.kt)("a",{parentName:"li",href:"http://127.0.0.1:8080/auth/realms/omlox/.well-known/openid-configuration"},"http://127.0.0.1:8080/auth/realms/omlox/.well-known/openid-configuration"))),(0,l.kt)("h3",{id:"openid_client_name"},"openid_client_name"),(0,l.kt)("p",null,'The client name of the DeepHub. The parameter is mandatory when using OpenID, in order to verify client token claims (mandatory by OpenID standard). Please refer to "API Security.md" for an audience claim mapping example.'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: not set"),(0,l.kt)("li",{parentName:"ul"},"Example: deephub-service")),(0,l.kt)("h3",{id:"openid_client_secret"},"openid_client_secret"),(0,l.kt)("p",null,"The OpenID client secret to be used for the DeepHub service."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: not set")),(0,l.kt)("h3",{id:"authserver_public_key_path"},"authserver_public_key_path"),(0,l.kt)("p",null,"The path to the PEM file containing the public key of the authentication server. This public key is used to verify requests to the OpenID config service. "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: not set")),(0,l.kt)("h3",{id:"verify_authserver"},"verify_authserver"),(0,l.kt)("p",null,"Whether to verify the OpenID server's certificate. This should be set to true in production mode.   "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: boolean"),(0,l.kt)("li",{parentName:"ul"},"Default: false")),(0,l.kt)("h3",{id:"public_key_path"},"public_key_path"),(0,l.kt)("p",null,"Path to the PEM file containing the server's public key required for secure communication over HTTPS / wss. This parameter is mandatory when using force_https."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: not set")),(0,l.kt)("h3",{id:"private_key_path"},"private_key_path"),(0,l.kt)("p",null,"Path to the PEM file containing the server's private key required for secure communication over HTTPS / wss. This parameter is mandatory when using force_https."),(0,l.kt)("h3",{id:"private_key_password"},"private_key_password"),(0,l.kt)("p",null,"The private key's password. "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: not set")),(0,l.kt)("h3",{id:"dh_params_path"},"dh_params_path"),(0,l.kt)("p",null,"Path to the DH params file for secure communication over HTTPS / wss. "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: not set")),(0,l.kt)("h3",{id:"force_https"},"force_https"),(0,l.kt)("p",null,"Wether the server should enforce to use HTTPS / wss (secure websocket) and disallow non-encrypted requests. Requires public and private certificates."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: boolean"),(0,l.kt)("li",{parentName:"ul"},"Default: false"))),(0,l.kt)(r.Z,{mdxType:"Section"},(0,l.kt)("h2",{id:"database-tuning"},"Database Tuning"),(0,l.kt)("h3",{id:"persist_locations"},"persist_locations"),(0,l.kt)("p",null,"Whether the server should write last locations and motions to the database. Note: When enabled, server performance might decrease. See db_fast_writes for mitigating some of the performance loss."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: boolean"),(0,l.kt)("li",{parentName:"ul"},"Default: true")),(0,l.kt)("h3",{id:"db_fast_writes"},"db_fast_writes"),(0,l.kt)("p",null,"Whether the server should merge multiple location and motion updates for the same entity into a single database update. Only works if persist_locations is enabled.\nThis option can significantly increase the rate at which location updates can be processed.\nAs a side effect, API calls for such updates can not report database errors immediately (e.g. lost connection).\nAccepted and confirmed updates will be retried und submitted once the error is resolved."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: boolean"),(0,l.kt)("li",{parentName:"ul"},"Default: true")),(0,l.kt)("h3",{id:"db_type"},"db_type"),(0,l.kt)("p",null,"The database type the DeepHub uses. Supported values are ",(0,l.kt)("strong",{parentName:"p"},"sqlite")," and ",(0,l.kt)("strong",{parentName:"p"},"cassandra"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: sqlite")),(0,l.kt)("h3",{id:"cassandra_hosts"},"cassandra_hosts"),(0,l.kt)("p",null,"List of host names for the cassandra cluster."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: localhost"),(0,l.kt)("li",{parentName:"ul"},"Example:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"# In the config file, a YAML array is expected\ncassandra_hosts:\n  - '127.0.0.1'\n  - 'localhost'\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# On the command line, this parameter can be given multiple times:\ndeephub --cassandra_hosts "localhost" --cassandra_hosts "127.0.0.1"\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# As an environment variable, a comma separated list of hosts is expected:\nDEEPHUB_CASSANDRA_HOSTS="localhost,127.0.0.1" deephub\n')),(0,l.kt)("h3",{id:"cassandra_port"},"cassandra_port"),(0,l.kt)("p",null,"Port of the cluster."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: number"),(0,l.kt)("li",{parentName:"ul"},"Default: 9042")),(0,l.kt)("h3",{id:"cassandra_username"},"cassandra_username"),(0,l.kt)("p",null,"Username used to authenticate to the Cassandra cluster.\nThis user needs full access to the DeepHub related namespaces."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: not set")),(0,l.kt)("h3",{id:"cassandra_password"},"cassandra_password"),(0,l.kt)("p",null,"Password used to authenticate to the Cassandra cluster."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: not set")),(0,l.kt)("h3",{id:"cassandra_keyspace"},"cassandra_keyspace"),(0,l.kt)("p",null,'Base name of the Cassandra keyspace. DeepHub will use two namespaces, one named as provided by this option, and a second one appended with "_stats".\nFor the default namespace this gives the following to namespaces: "deephub", "deephub_stats".\nThe user provided as cassandra_username needs full access to both namespaces.'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: deephub")),(0,l.kt)("h3",{id:"cassandra_connect_timeout"},"cassandra_connect_timeout"),(0,l.kt)("p",null,"Connection timeout, in milliseconds. "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: number"),(0,l.kt)("li",{parentName:"ul"},"Default: 5000")),(0,l.kt)("h3",{id:"cassandra_request_timeout"},"cassandra_request_timeout"),(0,l.kt)("p",null,"Request timeout, in milliseconds. "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: number"),(0,l.kt)("li",{parentName:"ul"},"Default: 12000")),(0,l.kt)("h3",{id:"cassandra_read_consistency"},"cassandra_read_consistency"),(0,l.kt)("p",null,"In order to be able to control the read consistency the DeepHub supports the following Cassandra consistencies:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"UNKNOWN"),(0,l.kt)("li",{parentName:"ul"},"ANY"),(0,l.kt)("li",{parentName:"ul"},"ONE"),(0,l.kt)("li",{parentName:"ul"},"TWO"),(0,l.kt)("li",{parentName:"ul"},"QUORUM"),(0,l.kt)("li",{parentName:"ul"},"ALL"),(0,l.kt)("li",{parentName:"ul"},"LOCAL_QUORUM"),(0,l.kt)("li",{parentName:"ul"},"EACH_QUORUM"),(0,l.kt)("li",{parentName:"ul"},"SERIAL"),(0,l.kt)("li",{parentName:"ul"},"LOCAL_SERIAL"),(0,l.kt)("li",{parentName:"ul"},"QUORUM"),(0,l.kt)("li",{parentName:"ul"},"LOCAL_ONE")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: LOCAL_QUORUM")),(0,l.kt)("h3",{id:"cassandra_write_consistency"},"cassandra_write_consistency"),(0,l.kt)("p",null,"In order to be able to control the write consistency the DeepHub supports the following Cassandra consistencies:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"UNKNOWN"),(0,l.kt)("li",{parentName:"ul"},"ANY"),(0,l.kt)("li",{parentName:"ul"},"ONE"),(0,l.kt)("li",{parentName:"ul"},"TWO"),(0,l.kt)("li",{parentName:"ul"},"QUORUM"),(0,l.kt)("li",{parentName:"ul"},"ALL"),(0,l.kt)("li",{parentName:"ul"},"LOCAL_QUORUM"),(0,l.kt)("li",{parentName:"ul"},"EACH_QUORUM"),(0,l.kt)("li",{parentName:"ul"},"SERIAL"),(0,l.kt)("li",{parentName:"ul"},"LOCAL_SERIAL"),(0,l.kt)("li",{parentName:"ul"},"QUORUM"),(0,l.kt)("li",{parentName:"ul"},"LOCAL_ONE")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: LOCAL_QUORUM")),(0,l.kt)("h3",{id:"cassandra_keep_alive"},"cassandra_keep_alive"),(0,l.kt)("p",null,"Cassandra connection keep-alive interval in seconds."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: number"),(0,l.kt)("li",{parentName:"ul"},"Default: 7200")),(0,l.kt)("h3",{id:"cassandra_latency_aware_routing"},"cassandra_latency_aware_routing"),(0,l.kt)("p",null,"Whether Cassandra latency aware routing is enabled."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: boolean"),(0,l.kt)("li",{parentName:"ul"},"Default: true")),(0,l.kt)("h3",{id:"cassandra_token_aware_routing"},"cassandra_token_aware_routing"),(0,l.kt)("p",null,"Whether Cassandra token aware routing is enabled."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: boolean"),(0,l.kt)("li",{parentName:"ul"},"Default: true")),(0,l.kt)("h3",{id:"cassandra_load_balancing"},"cassandra_load_balancing"),(0,l.kt)("p",null,"Whether Cassandra load balancing is enabled."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: boolean"),(0,l.kt)("li",{parentName:"ul"},"Default: true")),(0,l.kt)("h3",{id:"cassandra_io_threads"},"cassandra_io_threads"),(0,l.kt)("p",null,"Number of Cassandra IO threads."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: number"),(0,l.kt)("li",{parentName:"ul"},"Default: 1")),(0,l.kt)("h3",{id:"cassandra_replication_strategy"},"cassandra_replication_strategy"),(0,l.kt)("p",null,"Cassandra replication strategy."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: {'class': 'SimpleStrategy', 'replication_factor': '1'}")),(0,l.kt)("h3",{id:"cassandra_use_tls"},"cassandra_use_tls"),(0,l.kt)("p",null,"Whether the Cassandra connection enforces TLS."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: boolean"),(0,l.kt)("li",{parentName:"ul"},"Default: false")),(0,l.kt)("h3",{id:"cassandra_tls_pem"},"cassandra_tls_pem"),(0,l.kt)("p",null,"Path to the PEM file for a TLS enabled connection to Cassandra."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: string"),(0,l.kt)("li",{parentName:"ul"},"Default: not set")),(0,l.kt)("h3",{id:"cassandra_rate"},"cassandra_rate"),(0,l.kt)("p",null,"The targeted throughput to the Cassandra database in kB/s. This is a combined value for read and write operations, though, during operation DeepHub will almost exclusively write to the database. The size of the database operations can only be estimated, which is why this throughput is only approximate."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: number"),(0,l.kt)("li",{parentName:"ul"},"Default: 0 (unlimited)")),(0,l.kt)("h3",{id:"cassandra_burst_size"},"cassandra_burst_size"),(0,l.kt)("p",null,"Shaping parameter for the throughput to the Cassandra database in kB. This parameter allows to momentarily exceed the limit set by ",(0,l.kt)("inlineCode",{parentName:"p"},"cassandra_rate"),". The DeepHub will send up to this much data to the database without rate limitation before throttling. The DeepHub will allow transactions in cases where the size of a single transaction exceeds this parameter."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: number"),(0,l.kt)("li",{parentName:"ul"},"Default: 10000"))),(0,l.kt)(r.Z,{mdxType:"Section"},(0,l.kt)("h2",{id:"connecting-iso-24730-rtls-systems"},"Connecting ISO-24730 RTLS systems"),(0,l.kt)("h3",{id:"iso_24730_connections"},"iso_24730_connections"),(0,l.kt)("p",null,"A list of configurations for connections to ISO-24730 RTLS systems. The following properties are used for a connection:"),(0,l.kt)("p",null," ",(0,l.kt)("inlineCode",{parentName:"p"},"host")," - The host to connect to."),(0,l.kt)("p",null," ",(0,l.kt)("inlineCode",{parentName:"p"},"port")," - The port used for the connection."),(0,l.kt)("p",null," ",(0,l.kt)("inlineCode",{parentName:"p"},"type")," - The location provider type reported used for location updates from this system."),(0,l.kt)("p",null," ",(0,l.kt)("inlineCode",{parentName:"p"},"zone_id")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"foreign_id")," - The identifier of a zone with which all location updates from this system will be associated with. ",(0,l.kt)("strong",{parentName:"p"},"Exactly one")," of these two ids must be provided."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Expected value type: YAML list"),(0,l.kt)("li",{parentName:"ul"},"Default: not set")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"# Configuration file:\n- host: server\n  port: 4000\n  type: uwb\n  zone_id: FDE56BB8-64B1-4B95-ADEB-AB189EE937FE\n- host: otherserver\n  port: 4000\n  type: gps\n  foreign_id: some_id\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"# Command line or environment variable:\n[\n  {\n    'host':server,\n    'port':4000,\n    'type':uwb,\n    'zone_id':FDE56BB8-64B1-4B95-ADEB-AB189EE937FE\n  },\n  {\n    'host':otherserver,\n    'port':4000,\n    'type':gps,\n    'foreign_id':some_id\n  }\n]\n"))),(0,l.kt)(r.Z,{mdxType:"Section"},(0,l.kt)("h2",{id:"using-a-proxy-server-for-outside-communication"},"Using a proxy server for outside communication"),(0,l.kt)("p",null,"DeepHub allows for https communication via a proxy server which supports the HTTP CONNECT method.\nThis primarily concerns the access to the license server and OpenID server.\nDeepHub thereby respects the environment variables ",(0,l.kt)("strong",{parentName:"p"},"https_proxy")," and ",(0,l.kt)("strong",{parentName:"p"},"no_proxy")," with the following syntax and limitations:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The environment variables have to be lower case"),(0,l.kt)("li",{parentName:"ul"},"The proxy server must be the root target of its domain"),(0,l.kt)("li",{parentName:"ul"},"Login credentials must be provided as username:password in the ",(0,l.kt)("strong",{parentName:"li"},"https_proxy")," variable"),(0,l.kt)("li",{parentName:"ul"},"The exclusion via ",(0,l.kt)("strong",{parentName:"li"},"no_proxy")," is based on a comma separated list of sub.domain strings. IP address and range based filtering are currently not supported."),(0,l.kt)("li",{parentName:"ul"},"Traffic to localhost/0.0.0.0/127.0.0.1 will not be routed through the proxy.")),(0,l.kt)("p",null,"The following is an example configuration where a proxy server is used to access the license server, while the OpenID server is accessed directly:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# Route outgoing traffic via this proxy server\nhttps_proxy="username:password@local.proxy.server:80"\n\n# Access the OpenID server directly\nno_proxy="local.openid.server:443"\n'))),(0,l.kt)(r.Z,{mdxType:"Section"},(0,l.kt)("h2",{id:"preparing-self-signed-certificates-for-development"},"Preparing self signed certificates for development"),(0,l.kt)("p",null,"Below is an example using OpenSSL to create self-signed certificates for enabling HTTPS for development and testing purpose."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# Create public key cert.pem and private key key.pem\nopenssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 10000 -out cert.pem -subj "/C=DE/ST=BW/L=Heidelberg/O=Flowcate/CN=www.flowcate.com"\n\n# Create DH Params \nopenssl dhparam -out dh.pem 2048\n')),(0,l.kt)("p",null,"Place the files inside the DeepHub's data directory, and edit the hub_config.yaml file accordingly.\nExample configuration using above mentioned file names:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"port: 8081\nhost: localhost\nforce_https: false\npublic_key_path: cert.pem\nprivate_key_path: key.pem\ndh_params_path: dh.pem\n")),(0,l.kt)("p",null,"Note: Setting force_https to false will accept both HTTP and HTTPS requests. For security reasons this should be changed to true in production.")))}h.isMDXComponent=!0}}]);