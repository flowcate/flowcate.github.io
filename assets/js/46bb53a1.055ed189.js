"use strict";(self.webpackChunkdeephub_doc=self.webpackChunkdeephub_doc||[]).push([[5585],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),s=u(n),m=o,h=s["".concat(l,".").concat(m)]||s[m]||d[m]||r;return n?a.createElement(h,p(p({ref:t},c),{},{components:n})):a.createElement(h,p({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,p=new Array(r);p[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[s]="string"==typeof e?e:o,p[1]=i;for(var u=2;u<r;u++)p[u]=n[u];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},70387:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294);function o(e){let{children:t}=e;return a.createElement("section",{className:"section markdown"},t)}},93464:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>p,metadata:()=>l,toc:()=>c});var a=n(87462),o=(n(67294),n(3905)),r=n(70387);const p={sidebar_label:"Quuppa Connector",title:"Quuppa Connector",sidebar_position:10},i=void 0,l={unversionedId:"deephub/quuppaConnector",id:"deephub/quuppaConnector",title:"Quuppa Connector",description:"The Quuppa connector for the DeepHub allows to connect a Quuppa Positioning Engine to the DeepHub by creating omlox location updates from the Quuppa locations.",source:"@site/docs/deephub/quuppaConnector.mdx",sourceDirName:"deephub",slug:"/deephub/quuppaConnector",permalink:"/docs/deephub/quuppaConnector",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_label:"Quuppa Connector",title:"Quuppa Connector",sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"ISO-24730 Adapter",permalink:"/docs/deephub/iso24730"},next:{title:"RPC Interface",permalink:"/docs/deephub/RPCInterface"}},u={},c=[{value:"Setup and Configuration",id:"setup-and-configuration",level:2},{value:"Property Mapping",id:"property-mapping",level:2},{value:"Example",id:"example",level:3},{value:"Authorization",id:"authorization",level:2}],s={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(r.Z,{mdxType:"Section"},(0,o.kt)("p",null,"The Quuppa connector for the DeepHub allows to connect a Quuppa Positioning Engine to the DeepHub by creating omlox location updates from the Quuppa locations."),(0,o.kt)("p",null,"The connector can thereby be configured as a UDP output target in the Quuppa Positioning Engine.")),(0,o.kt)(r.Z,{mdxType:"Section"},(0,o.kt)("h2",{id:"setup-and-configuration"},"Setup and Configuration"),(0,o.kt)("p",null,"The Quuppa connector is available as a standalone Docker image at ",(0,o.kt)("inlineCode",{parentName:"p"},"flowcate/deephub-connector:quuppa"),".\nTo start this connector alongside a DeepHub instance the following configuration must be added to the service section in the docker-compose file used to start the DeepHub:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'quuppa:\n  image: flowcate/deephub-connector:quuppa\n  container_name: qpa-connector\n  environment:\n    - DEEPHUB_URL=deephub\n    - DEEPHUB_PORT=7081\n    - QUUPPA_CONNECTOR_PORT=12000\n    - QUUPPA_CONNECTOR_DEBUG=false\n  ports:\n    - "12000:12000/udp"\n  networks:\n    - deephub-net\n  depends_on:\n    - deephub\n')),(0,o.kt)("p",null,"This configuration is based on the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/flowcate/deephub-basic-setup"},"DeepHub Basic Example"),'.\nIt will start an additional container ("quuppa-connector"), which accepts udp messages at port 12000.\nThese messages will be forwarded as omlox location updates to the DeepHub service.'),(0,o.kt)("p",null,"For other setups, the details of the configuration may have to be adjusted.\nThe relevant configuration parameters are:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Variable"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"DEEPHUB_PORT"),(0,o.kt)("td",{parentName:"tr",align:null},"The port of the DeepHub instance.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"DEEPHUB_URL"),(0,o.kt)("td",{parentName:"tr",align:null},"The address of the DeepHub instance.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"DEEPHUB_TARGET"),(0,o.kt)("td",{parentName:"tr",align:null},"The url target of the DeepHub instance.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"QUUPPA_CONNECTOR_PORT"),(0,o.kt)("td",{parentName:"tr",align:null},"The port used for receiving udp messages.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"QUUPPA_CONNECTOR_DEBUG"),(0,o.kt)("td",{parentName:"tr",align:null},"Whether debug output should be printed by the connector. (true or false)")))),(0,o.kt)("p",null,"The Quuppa connector can also run as a standalone service.\nIt does not have to run in the same docker network as the DeepHub.\nIn this case, the variable DEEPHUB_URL must point to the ip address or URL where the DeepHub can be reached.")),(0,o.kt)(r.Z,{mdxType:"Section"},(0,o.kt)("h2",{id:"property-mapping"},"Property Mapping"),(0,o.kt)("p",null,"The omlox location updates are constructed based on the information contained in the Quuppa location.\nThe connector thereby uses the following mapping:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Quuppa"),(0,o.kt)("th",{parentName:"tr",align:null},"omlox"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"tagId"),(0,o.kt)("td",{parentName:"tr",align:null},"provider_id")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"locationCoordSysId"),(0,o.kt)("td",{parentName:"tr",align:null},"source")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"location"),(0,o.kt)("td",{parentName:"tr",align:null},"position")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"locationTS"),(0,o.kt)("td",{parentName:"tr",align:null},"timestamp_generated")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"locationRadius"),(0,o.kt)("td",{parentName:"tr",align:null},"accuracy")))),(0,o.kt)("p",null,"Optional omlox properties may be omitted from the Quuppa message, but all required properties must be present."),(0,o.kt)("p",null,"The location updates are always interpreted as local coordinates.\nThis means that ",(0,o.kt)("strong",{parentName:"p"},"locationCoordSysId")," MUST correspond to a valid ",(0,o.kt)("strong",{parentName:"p"},"id")," or ",(0,o.kt)("strong",{parentName:"p"},"foreign_id")," of a zone in the DeepHub.",(0,o.kt)("br",{parentName:"p"}),"\n","Also, ",(0,o.kt)("strong",{parentName:"p"},"locationType")," is expected to be present in the Quuppa location and to be neither ",(0,o.kt)("em",{parentName:"p"},"hidden"),", nor ",(0,o.kt)("em",{parentName:"p"},"noData"),".",(0,o.kt)("br",{parentName:"p"}),"\n","The ",(0,o.kt)("strong",{parentName:"p"},"provider_type")," of the omlox location update will always be set to ",(0,o.kt)("em",{parentName:"p"},"unknown"),"."),(0,o.kt)("p",null,'In addition, the original Quuppa location will be added to the properties field of the omlox location as "quuppa_original".'),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("p",null,"The following Quuppa location will result in the following omlox location update websocket message."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'// Quuppa location\n{\n  "location": [0,0],\n  "tagId": "qpa_tag_id",\n  "locationCoordSysId": "qpa_zone_id",\n  "locationType": "position"\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'// resulting omlox location update websocket message\n{\n  "event": "message",\n  "topic": "location_updates",\n  "payload": [\n    {\n      "provider_type": "unknown",\n      "provider_id": "qpa_tag_id",\n      "source": "qpa_zone_id",\n      "position": {"type": "Point", "coordinates": [0,0]},\n      "properties": {\n        "quuppa_original": {\n          "location": [0,0],\n          "tagId": "qpa_tag_id",\n          "locationCoordSysId": "qpa_zone_id",\n          "locationType": "position"\n        }\n      }\n    }\n  ]\n}\n'))),(0,o.kt)(r.Z,{mdxType:"Section"},(0,o.kt)("h2",{id:"authorization"},"Authorization"),(0,o.kt)("p",null,"Access management with authorization is currently ",(0,o.kt)("strong",{parentName:"p"},"not")," supported by this connector.\nIf the DeepHub is configured to require authorization for sending location updates via websocket, this connector will not be able to send location updates.")))}m.isMDXComponent=!0}}]);